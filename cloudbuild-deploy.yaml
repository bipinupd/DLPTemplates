steps:
    - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
      id: 'Download DLP Artifact'
      args: ['gsutil', 'cp', 'gs://${_ARTIFACT_REPO}/${_SHORT_SHA}/dlp.zip', '/workspace/dlp.zip']
    - name: 'gcr.io/${PROJECT_ID}/zip'
      id: 'Unzip & Identify Wrapped Keys Required'
      entrypoint: bash
      args:
      - '-c'
      - |
        cd /workspace/
        unzip -f dlp.zip
        cd /workspace/dlp
        cat deidentify_templates/*.json | jq '.deidentifyTemplate.deidentifyConfig.recordTransformations.fieldTransformations | . [].primitiveTransformation | . [].cryptoKey.kmsWrapped.wrappedKey' |  sed 's/\"{{//g' | cut -d '.' -f 1 | sort -u >> dlp_secret
    - name: node
      id: 'Generate DeIdentification templates'
      ntrypoint: bash
      args:
      - '-c'
      - |
        cd /workspace/dlp/scripts/generate_templates
        npm install
        secret_names = tr '\n' ',' < /workspace/dlp/dlp_secret | sed 's/,$/\n/'
        node collect_secret.js -p ${__WORK} -d ../../deIdentify_templates -s $secret_names
    - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
      id: 'Deploy Artifacts'
      entrypoint: bash
      args:
        - '-c'
        - |
          cd /workspace/dlp
          deidentify_status=$(bash /workspace/dlp/scripts/deidentify_script.sh $_WORK)
          inspect_status=$(bash /workspace/dlp/scripts/inspect_script.sh $_WORK)
          if [[ $deidentify_status -eq "0" ]] && [[ $inspect_status -eq "0" ]];
          then
            exit 0
          else
            exit -1
          fi
    - name: 'gcr.io/${PROJECT_ID}/dp-test-python'
      entrypoint: bash
      args:
      - '-c'
      - |
        cd /workspace/dlp/tests
        if [ "$(ls -A it-test/)" ]; then
          pytest -m smoke --project_id=$_WORK -s
        fi
      id: 'IT/Smoke Test'